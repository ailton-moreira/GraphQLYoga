// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relationships
  reviews   Review[]
  posts     Post[]
  comments  Comment[]
  books     Book[]
  files     File[]    // Add files relationship
}

model Book {
  id          String    @id @default(uuid())
  title       String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  published   Boolean

  // Relationships
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  reviews     Review[]
}

model Review {
  id        String    @id @default(uuid())
  rating    Int
  comment   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  published Boolean
  
  // Relationships
  book      Book      @relation(fields: [bookId], references: [id])
  bookId    String
  user      User      @relation(fields: [userId], references: [id])
  userId    String
}

model Post {
  id        String    @id @default(uuid())
  title     String
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  published Boolean
  
  // Relationships
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  comments  Comment[]
}

model Comment {
  id        String    @id @default(uuid())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  published Boolean
  // Relationships
  post      Post      @relation(fields: [postId], references: [id])
  postId    String
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
}

// New File model for uploaded files
model File {
  id        String    @id @default(uuid())
  filename  String
  mimetype  String
  encoding  String
  url       String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // Relationships
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?
}
